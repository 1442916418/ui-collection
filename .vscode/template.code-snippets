{
	"Components template": {
		"prefix": "y-components-template",
		"scope": "javascript",
		"body": [
			"import styles from './styles.js'",
			"",
			"export default class $1 extends HTMLElement {",
			"  static get observedAttributes() {",
			"    return ['disabled']",
			"  }",
			"",
			"  constructor() {",
			"    super()",
			"    const shadowRoot = this.attachShadow({ mode: 'open' })",
			"    \\$0",
			"    shadowRoot.innerHTML = `<style>\\${styles}</style><div></div><slot></slot>`",
			"  }",
			"",
			"  get disabled() {",
			"    return this.getAttribute('disabled') !== null",
			"  }",
			"",
			"  set disabled(value) {",
			"    if (value === null || value === false) {",
			"      this.removeAttribute('disabled')",
			"    } else {",
			"      this.setAttribute('disabled', '')",
			"    }",
			"  }",
			"",
			"  connectedCallback() {",
			"    // this.Ele = this.shadowRoot.getElementById('Ele')",
			"",
			"    // this.btnKeydown = (e) => this.handleBtnKeydown(e)",
			"",
			"    // this.btnEle.addEventListener('keydown', this.btnKeydown)",
			"",
			"    this.disabled = this.disabled",
			"",
			"    this.setAttribute('sign', 'query')",
			"  }",
			"",
			"  disconnectedCallback() {",
			"    // this.btnEle.removeEventListener('keydown', this.btnKeydown)",
			"  }",
			"",
			"  attributeChangedCallback(name, oldValue, newValue) {",
			"    // if (name === 'disabled') {}",
			"  }",
			"}",
			"",
			"if (!customElements.get('$2')) {",
			"  customElements.define('$2', $1)",
			"}"
		],
		"description": "Components template"
	},
	"SCSS Components template": {
		"prefix": "y-scss-components-template",
		"body": [
			"/*! -$1 */",
			"$0",
			".$1 {",
			"  width: 100%;",
			"  height: 100%;",
			"  background: none;",
			"  outline: 0;",
			"  border: 0;",
			"  padding: 0;",
			"  user-select: none;",
			"}",
			"",
			":host {",
			"  position: relative;",
			"  display: inline-flex;",
			"  padding: \\$$1-padding-y \\$$1-padding-x;",
			"  box-sizing: border-box;",
			"  vertical-align: middle;",
			"  line-height: \\$$1-line-height;",
			"  overflow: hidden;",
			"  align-items: center;",
			"  justify-content: center;",
			"  font-size: \\$$1-font-size;",
			"  letter-spacing: \\$$1-letter-spacing;",
			"  border-width: $border-width;",
			"  border-style: solid;",
			"  border-radius: $border-radius;",
			"  border-color: $border-color-transparent;",
			"  transition: $transition-base;",
			"}",
			"",
			"@each \\$color, \\$value in \\$theme-colors {",
			"  @include $1-variant(\\$color, \\$value, \\$value);",
			"}",
			"",
			"@each \\$type, \\$value in \\$theme-sizes {",
			"  @include $1-size(\\$type, \\$value, \\$btn-padding-y, \\$btn-padding-x, \\$btn-line-height, \\$border-radius);",
			"}",
			"",
			"/*! $1- */",
			""
		],
		"description": "SCSS Components template"
	},
	"SCSS Mixin template": {
		"prefix": "y-scss-mixin-template",
		"scope": "scss",
		"body": [
			"@mixin $1-variant(",
			"  \\$type,",
			"  \\$background,",
			"  \\$border,",
			"  \\$hover-background: darken(\\$background, 0%),",
			"  \\$hover-border: darken(\\$border, 0%),",
			"  \\$active-background: \\$background,",
			"  \\$active-border: darken(\\$border, 0%)",
			") {",
			"  $0",
			"  @if \\$type == 'primary' {",
			"    :host {",
			"      color: color-yiq(\\$background);",
			"      box-shadow: box-shadow(\\$type);",
			"      @include gradient-bg(\\$background);",
			"    }",
			"",
			"    :host(:not([disabled]):hover) {",
			"      color: color-yiq(\\$hover-background);",
			"      background-color: \\$hover-background;",
			"      border-color: \\$hover-border;",
			"      box-shadow: box-shadow('#{\\$type}-inset');",
			"    }",
			"",
			"    :host(:not([disabled]):focus) {",
			"      box-shadow: box-shadow('#{\\$type}-inset');",
			"    }",
			"",
			"    :host(:not([disabled]):active) {",
			"      box-shadow: box-shadow('#{\\$type}-inset');",
			"    }",
			"  } @else {",
			"    :host([theme='#{\\$type}']) {",
			"      color: color-yiq(\\$background);",
			"      box-shadow: box-shadow(\\$type);",
			"      @include gradient-bg(\\$background);",
			"    }",
			"",
			"    :host([theme='#{\\$type}']) {",
			"      color: color-yiq(\\$background);",
			"      @include gradient-bg(\\$background);",
			"    }",
			"",
			"    :host([theme='#{\\$type}']:not([disabled]):hover) {",
			"      color: color-yiq(\\$hover-background);",
			"      background-color: \\$hover-background;",
			"      border-color: \\$hover-border;",
			"      box-shadow: box-shadow('#{\\$type}-inset');",
			"    }",
			"",
			"    :host([theme='#{\\$type}']:not([disabled]):focus) {",
			"      box-shadow: box-shadow('#{\\$type}-inset');",
			"    }",
			"",
			"    :host([theme='#{\\$type}']:not([disabled]):active) {",
			"      box-shadow: box-shadow('#{\\$type}-inset');",
			"    }",
			"  }",
			"}",
			"",
			"@mixin $1-size(\\$type, \\$font-size, \\$padding-y, \\$padding-x, \\$line-height, \\$border-radius) {",
			"  :host([size='#{\\$type}']) {",
			"    padding: theme-styles-size(\\$type, \\$padding-y) theme-styles-size(\\$type, \\$padding-x);",
			"    font-size: \\$font-size;",
			"    line-height: theme-styles-size(\\$type, \\$line-height);",
			"",
			"    @if \\$enable-rounded {",
			"      @include border-radius(\\$border-radius);",
			"    } @else {",
			"      border-radius: 0;",
			"    }",
			"  }",
			"}",
			""
		],
		"description": "SCSS Mixin template"
	}
}