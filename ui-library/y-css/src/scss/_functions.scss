// Bootstrap functions
//
// Utility mixins and functions for evaluating source code across our variables, maps, and mixins.

// Ascending
// Used to evaluate Sass maps like our grid breakpoints.
@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if $prev-num == null or unit($num) == '%' {
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

// Starts at zero
// Used to ensure the min-width of the lowest breakpoint starts at 0.
@mixin _assert-starts-at-zero($map, $map-name: '$grid-breakpoints') {
  $values: map-values($map);
  $first-value: nth($values, 1);
  @if $first-value != 0 {
    @warn "First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.";
  }
}

// 颜色对比
@function color-contrast($color, $dark: $yiq-text-dark, $light: $yiq-text-light) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);

  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

  @if ($yiq >= $contrasted-threshold) {
    @return $dark;
  } @else {
    @return $light;
  }
}

// Retrieve color Sass maps
@function color($key: 'blue') {
  @return map-get($colors, $key);
}

@function theme-color($key: 'primary') {
  @return map-get($theme-colors, $key);
}

@function gray($key: '100') {
  @return map-get($grays, $key);
}

// Request a theme color level
@function theme-color-level($color-name: 'primary', $level: 0) {
  $color: theme-color($color-name);
  $color-base: if($level > 0, $black, $white);
  $level: abs($level);

  @return mix($color-base, $color, $level * $theme-color-interval);
}

@function theme-styles-size($type, $value) {
  @if $type == 'large' {
    @return ($value * 1.25);
  } @else if $type == 'small' {
    @return ($value * 0.875);
  } @else {
    @return $value;
  }
}

@function box-shadow($key: 'primary') {
  @return map-get($theme-box-shadow, $key);
}

// Spacing
@function spacer-value($infix, $value, $default-spacer: $spacer) {
  @if $value == 0 {
    @return 0;
  }

  @if $infix == '' {
    @return ($default-spacer * 0.5) * $value;
  } @else if $infix == '-sm' {
    @return ($default-spacer * 1) * $value;
  } @else if $infix == '-md' {
    @return ($default-spacer * 1.5) * $value;
  } @else if $infix == '-lg' {
    @return ($default-spacer * 2) * $value;
  } @else if $infix == '-xl' {
    @return ($default-spacer * 2.5) * $value;
  }
}

// 计算断点对应的值
//
// $infix - 断点类型
// $value - 默认值
// $step-map - 断点对应的步进值
@function computed-breakpoint-value($infix, $value, $step-map) {
  @if $value == 0 {
    @return 0;
  }

  $step: map-get($step-map, $infix);

  @if $infix == '' {
    @return ($value * $step);
  } @else if $infix == '-sm' {
    @return ($value * $step);
  } @else if $infix == '-md' {
    @return ($value * $step);
  } @else if $infix == '-lg' {
    @return ($value * $step);
  } @else if $infix == '-xl' {
    @return ($value * $step);
  }
}

// 计算断点对应的值(循环)
//
// $infix - 断点类型
// $index - 下标
// $value - 默认值
// $step-map - 断点对应的步进值
@function computed-breakpoint-echo-value($infix, $index, $value, $step-map) {
  @if $index == 0 {
    @return 0;
  }

  $step: map-get($step-map, $infix);

  @if $infix == '' {
    @return ($value * $step) * $index;
  } @else if $infix == '-sm' {
    @return ($value * $step) * $index;
  } @else if $infix == '-md' {
    @return ($value * $step) * $index;
  } @else if $infix == '-lg' {
    @return ($value * $step) * $index;
  } @else if $infix == '-xl' {
    @return ($value * $step) * $index;
  }
}
